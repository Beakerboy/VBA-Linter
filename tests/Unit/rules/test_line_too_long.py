import pytest
from Unit.rules.rule_test_base import RuleTestBase
from vba_linter.rules.rule_base import RuleBase
from vba_linter.rules.line_too_long import LineTooLong


anti_patterns = [
    [
        RuleTestBase.worst_practice,
        [(1, 80, '501', 92)]
    ],
    [
        '''\
Public Function Foo(num)
x = "2341234567812345678901234561234567890123456789012345678901211121234123456781234567890123456123456789012345678901234567890121112123412345678123456789012345612345678901234567890123456789012111212341234567812345678901234561234567890123456789012345678901211121234123456781234567890123456123456789012345678901234567890121112123412345678123456789012345612345678901234567890123456789012111212341234567812345678901234561234567890123456789012345678901211121234123456781234567890123456123456789012345678901234567890121112123412345678123456789012345612345678901234567890123456789012111212341234567812345678901234561234567890123456789012345678901211121234123456781234567890123456123456789012345678901234567890121112123412345678123456789012345612345678901234567890123456789012111212341234567812345678901234561234567890123456789012345678901211121234123456781234567890123456123456789012345678901234567890121112123412345678123456789012345612345678901234567890123456789012111212341234567812345678901234561234567890123456789012345678901"
End Function
''',  # noqa,
        [(2, 80, '501', 1024)]
    ]
]


rule = LineTooLong()


@pytest.mark.parametrize('rule', [rule])
@pytest.mark.parametrize(
    "code, expected",
    anti_patterns + RuleTestBase.best_practice
)
def test_test(rule: RuleBase, code: str, expected: tuple) -> None:
    assert RuleTestBase.run_test(rule, code) == expected


@pytest.mark.parametrize('rule', [rule])
def test_message(rule: RuleBase) -> None:
    data = (3, 80, "501", 86)
    expected = ":3:80: W501 line too long (86 > 79 characters)"
    assert rule.create_message(data) == expected
